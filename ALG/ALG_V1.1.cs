//
// File generated by HDevelop for HALCON/.NET (C#) Version 19.11.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {


    // Local iconic variables 

    HObject ho_Image, ho_GrayImage, ho_Rectangle;
    HObject ho_ImageReduced, ho_Regions, ho_ConnectedRegions;
    HObject ho_SelectedRegions, ho_MaxCircularitySelected, ho_ImageCenter;
    HObject ho_Contours, ho_EnClosingCircle, ho_Circle1, ho_CircleDifference;
    HObject ho_CirclePolar, ho_PolarTransImage, ho_Regions1;
    HObject ho_ImageScaled, ho_Region, ho_RegionFillUp, ho_ConnectedRegions1;
    HObject ho_SelectedRegions2, ho_XYTransRegion;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_WindowHandle = new HTuple(), hv_Row1 = new HTuple();
    HTuple hv_Column1 = new HTuple(), hv_Row2 = new HTuple();
    HTuple hv_Column2 = new HTuple(), hv_RegionCircularity = new HTuple();
    HTuple hv_RegionIndices = new HTuple(), hv_Inverted = new HTuple();
    HTuple hv_CircleRow = new HTuple(), hv_CircleColumn = new HTuple();
    HTuple hv_CircleRadius = new HTuple(), hv_DistanceMin = new HTuple();
    HTuple hv_DistanceMax = new HTuple(), hv_WindowHandle_polar = new HTuple();
    HTuple hv_UsedThreshold = new HTuple(), hv_Width1 = new HTuple();
    HTuple hv_Height1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_GrayImage);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_MaxCircularitySelected);
    HOperatorSet.GenEmptyObj(out ho_ImageCenter);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    HOperatorSet.GenEmptyObj(out ho_EnClosingCircle);
    HOperatorSet.GenEmptyObj(out ho_Circle1);
    HOperatorSet.GenEmptyObj(out ho_CircleDifference);
    HOperatorSet.GenEmptyObj(out ho_CirclePolar);
    HOperatorSet.GenEmptyObj(out ho_PolarTransImage);
    HOperatorSet.GenEmptyObj(out ho_Regions1);
    HOperatorSet.GenEmptyObj(out ho_ImageScaled);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
    HOperatorSet.GenEmptyObj(out ho_XYTransRegion);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.CloseWindow(HDevWindowStack.Pop());
    }
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "Photo/6.bmp");
    ho_GrayImage.Dispose();
    HOperatorSet.Rgb1ToGray(ho_Image, out ho_GrayImage);
    hv_Width.Dispose();hv_Height.Dispose();
    HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,0,hv_Width/4,hv_Height/4,0,"visible","",out hv_WindowHandle);
    HDevWindowStack.Push(hv_WindowHandle);
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }

    ///*图像处理*/
    hv_Row1.Dispose();hv_Column1.Dispose();hv_Row2.Dispose();hv_Column2.Dispose();
    HOperatorSet.DrawRectangle1(hv_WindowHandle, out hv_Row1, out hv_Column1, out hv_Row2, 
        out hv_Column2);
    ho_Rectangle.Dispose();
    HOperatorSet.GenRectangle1(out ho_Rectangle, hv_Row1, hv_Column1, hv_Row2, hv_Column2);
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_GrayImage, ho_Rectangle, out ho_ImageReduced);
    ///*处理区域*/
    ho_Regions.Dispose();
    HOperatorSet.AutoThreshold(ho_ImageReduced, out ho_Regions, 2);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", 3000, 50000);
    ///*Part1:切割出圆环*/
    //  /*提取圆度最高的*/
    hv_RegionCircularity.Dispose();
    HOperatorSet.RegionFeatures(ho_SelectedRegions, "circularity", out hv_RegionCircularity);
    hv_RegionIndices.Dispose();
    HOperatorSet.TupleSortIndex(hv_RegionCircularity, out hv_RegionIndices);
    hv_Inverted.Dispose();
    HOperatorSet.TupleInverse(hv_RegionIndices, out hv_Inverted);
    //  /*选择最大的*/
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_MaxCircularitySelected.Dispose();
    HOperatorSet.SelectObj(ho_SelectedRegions, out ho_MaxCircularitySelected, (hv_Inverted.TupleSelect(
        0))+1);
    }

    //  /*提取边缘*/
    ho_ImageCenter.Dispose();
    HOperatorSet.ReduceDomain(ho_ImageReduced, ho_MaxCircularitySelected, out ho_ImageCenter
        );
    ho_Contours.Dispose();
    HOperatorSet.GenContourRegionXld(ho_MaxCircularitySelected, out ho_Contours, 
        "border");

    //  /*最小内接圆*/
    hv_CircleRow.Dispose();hv_CircleColumn.Dispose();hv_CircleRadius.Dispose();
    HOperatorSet.SmallestCircleXld(ho_Contours, out hv_CircleRow, out hv_CircleColumn, 
        out hv_CircleRadius);

    hv_DistanceMin.Dispose();hv_DistanceMax.Dispose();
    HOperatorSet.DistancePc(ho_Contours, hv_CircleRow, hv_CircleColumn, out hv_DistanceMin, 
        out hv_DistanceMax);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_EnClosingCircle.Dispose();
    HOperatorSet.GenCircle(out ho_EnClosingCircle, hv_CircleRow, hv_CircleColumn, 
        hv_DistanceMax+3.4);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_Circle1.Dispose();
    HOperatorSet.GenCircle(out ho_Circle1, hv_CircleRow, hv_CircleColumn, hv_DistanceMax+20);
    }

    //  /*切出圆环*/
    ho_CircleDifference.Dispose();
    HOperatorSet.Difference(ho_Circle1, ho_EnClosingCircle, out ho_CircleDifference
        );
    ho_CirclePolar.Dispose();
    HOperatorSet.ReduceDomain(ho_GrayImage, ho_CircleDifference, out ho_CirclePolar
        );

    ///*Part2:增强图像并转换极坐标*/
    HOperatorSet.SetWindowAttr("background_color","black");
    HOperatorSet.OpenWindow(0,hv_Width/4,hv_Width/4,100,0,"visible","",out hv_WindowHandle_polar);
    HDevWindowStack.Push(hv_WindowHandle_polar);
    HDevWindowStack.SetActive(hv_WindowHandle_polar);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_PolarTransImage.Dispose();
    HOperatorSet.PolarTransImageExt(ho_CirclePolar, out ho_PolarTransImage, hv_CircleRow, 
        hv_CircleColumn, (new HTuple(-45)).TupleRad(), (new HTuple(315)).TupleRad()
        , hv_DistanceMax+3, hv_DistanceMax+20, hv_Width, hv_Height, "nearest_neighbor");
    }
    //  /*增强图像*/
    ho_Regions1.Dispose();
    HOperatorSet.AutoThreshold(ho_PolarTransImage, out ho_Regions1, 2);
    ho_ImageScaled.Dispose();
    HOperatorSet.ScaleImage(ho_PolarTransImage, out ho_ImageScaled, 5, -300);

    ////Part3:处理出极性
    ho_Region.Dispose();hv_UsedThreshold.Dispose();
    HOperatorSet.BinaryThreshold(ho_ImageScaled, out ho_Region, "max_separability", 
        "light", out hv_UsedThreshold);
    ho_RegionFillUp.Dispose();
    HOperatorSet.FillUp(ho_Region, out ho_RegionFillUp);
    ho_ConnectedRegions1.Dispose();
    HOperatorSet.Connection(ho_RegionFillUp, out ho_ConnectedRegions1);
    ho_SelectedRegions2.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions2, "area", 
        "and", 300000, 999999);

    ////Part4:还原回去
    HDevWindowStack.SetActive(hv_WindowHandle);
    hv_Width1.Dispose();hv_Height1.Dispose();
    HOperatorSet.GetImageSize(ho_ImageScaled, out hv_Width1, out hv_Height1);
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_XYTransRegion.Dispose();
    HOperatorSet.PolarTransRegionInv(ho_SelectedRegions2, out ho_XYTransRegion, hv_CircleRow, 
        hv_CircleColumn, (new HTuple(-45)).TupleRad(), (new HTuple(315)).TupleRad()
        , hv_DistanceMax+3, hv_DistanceMax+20, hv_Width1, hv_Height1, hv_Width, hv_Height, 
        "nearest_neighbor");
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
    }
    if (HDevWindowStack.IsOpen())
    {
      HOperatorSet.DispObj(ho_XYTransRegion, HDevWindowStack.GetActive());
    }
    ho_Image.Dispose();
    ho_GrayImage.Dispose();
    ho_Rectangle.Dispose();
    ho_ImageReduced.Dispose();
    ho_Regions.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_MaxCircularitySelected.Dispose();
    ho_ImageCenter.Dispose();
    ho_Contours.Dispose();
    ho_EnClosingCircle.Dispose();
    ho_Circle1.Dispose();
    ho_CircleDifference.Dispose();
    ho_CirclePolar.Dispose();
    ho_PolarTransImage.Dispose();
    ho_Regions1.Dispose();
    ho_ImageScaled.Dispose();
    ho_Region.Dispose();
    ho_RegionFillUp.Dispose();
    ho_ConnectedRegions1.Dispose();
    ho_SelectedRegions2.Dispose();
    ho_XYTransRegion.Dispose();

    hv_Width.Dispose();
    hv_Height.Dispose();
    hv_WindowHandle.Dispose();
    hv_Row1.Dispose();
    hv_Column1.Dispose();
    hv_Row2.Dispose();
    hv_Column2.Dispose();
    hv_RegionCircularity.Dispose();
    hv_RegionIndices.Dispose();
    hv_Inverted.Dispose();
    hv_CircleRow.Dispose();
    hv_CircleColumn.Dispose();
    hv_CircleRadius.Dispose();
    hv_DistanceMin.Dispose();
    hv_DistanceMax.Dispose();
    hv_WindowHandle_polar.Dispose();
    hv_UsedThreshold.Dispose();
    hv_Width1.Dispose();
    hv_Height1.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

